{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","sandbox","uuid","connectedArgs","where","connected","usernameArgs","username","uuidArgs","newAgent","name","hostname","pid","beforeEach","create","hasMany","stub","withArgs","returns","Promise","resolve","toJSON","findOne","byUuid","findById","byId","update","findAll","all","platzi","setupDatabase","db","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","findByUuid","agents","is","length","findConnected","findByUsername","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava') //libreria para pruebas unitarias\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst agentFixtures = require('./fixtures/agent')//hace el llamado al datos falsos o quemados\n\nlet config = {\n   logging: function() {}\n}\n\nlet MetricStub = { //los stub simulan modelos, les pasan datos quemados para verificar que funcionan\n    belongsTo: sinon.spy() //sinon es una funcion que da diferentes datos como por ejemplo ver cuantas veces se requirio el metodo\n}\n\nlet id = 1\nlet single = Object.assign({}, agentFixtures.single) //clonamos el single para no estar probando solo con la instancia de fixtures, si no tener otra instancia por aparte \nlet AgentStub = null\nlet sandbox = null\nlet uuid = 'yyy-yyy-yyy'\n\nlet connectedArgs = {\n    where: {connected: true}\n}\n\nlet usernameArgs = {\n    where: {username: 'platzi', connected: true}\n}\n\nlet uuidArgs = {\n    where: { uuid }\n} \n\nlet newAgent = {\n    uuid: '123-123-123',\n    name: 'test',\n    username: 'test',\n    hostname: 'test',\n    pid: 0,\n    connected: false\n}\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create() //Cuando una funcion como agent es requerida muchas veces en varias partes del codigo los datos de cuantas veces se uso se acumulan y no funciona, se crea un sandbox para que esa estadistica se reinicie cada vez que se use\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    //Model create Stub\n    AgentStub.create = sandbox.stub()\n    AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\n        toJSON(){return newAgent}}))\n    \n    //Model findOne Stub\n    AgentStub.findOne = sandbox.stub()\n    AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n    //Model findById Stub\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id))) //Con esta linea le doy ordenes a sinon de que es lo que ocupo que haga\n\n    //Model update Stub\n    AgentStub.update = sandbox.stub()\n    AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n    //Model findAll Stub\n    AgentStub.findAll = sandbox.stub()\n    AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n    AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\n    AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\n\n    const setupDatabase = proxyquire('../',{\n        './models/agent' : () => AgentStub,\n        './models/metric' : () => MetricStub\n    })\n    db = await setupDatabase(config)\n})\n\n    test.afterEach(() => {\n        sandbox && sandbox.restore()\n    })\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n//El siguiente metodo es para hacer las pruebas de los stubs\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed') //estas propiedades o estos mensajes me los entrega Sinon.spy\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')     \n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t =>{\n    let agent = await db.Agent.findById(id)\n\n    t.true(AgentStub.findById.called, 'findById should be called on model')\n    t.true(AgentStub.findById.calledOnce, 'findById should be called once')\n    t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\n\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#findByUuid', async t => {\n    let agent = await db.Agent.findByUuid(uuid)\n  \n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n    t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\n  \n    t.deepEqual(agent, agentFixtures.byUuid(uuid), 'agent should be the same')\n  })\n  \n  test.serial('Agent#findAll', async t => {\n    let agents = await db.Agent.findAll()\n  \n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n    t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\n  \n    t.is(agents.length, agentFixtures.all.length, 'agents should be the same amount')\n    t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\n  })\n  \n  test.serial('Agent#findConnected', async t => {\n    let agents = await db.Agent.findConnected()\n  \n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n    t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')\n  \n    t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')\n    t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\n  })\n  \n  test.serial('Agent#findByUsername', async t => {\n    let agents = await db.Agent.findByUsername('platzi')\n  \n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n    t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')\n  \n    t.is(agents.length, agentFixtures.platzi.length, 'agents should be the same amount')\n    t.deepEqual(agents, agentFixtures.platzi, 'agents should be the same')\n  })\n\ntest.serial('Agent#createOrUpdate - exist', async t => {\n    let agent = await db.Agent.createOrUpdate(single)\n\n    t.true(AgentStub.findOne.called, 'findOne shoul be called on model')\n    t.true(AgentStub.findOne.calledTwice, 'findOne should be called twice')\n    t.true(AgentStub.update.calledOnce, 'update should be called once')\n\n    t.deepEqual(agent, single, 'agent should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - new', async t => {\n    let agent = await db.Agent.createOrUpdate(newAgent)\n\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n    t.true(AgentStub.update.calledWith({\n        where: { uuid: newAgent.uuid }\n    }), 'findOne should be called with uuid args')\n    t.true(AgentStub.create.called, 'create should be called on model')\n    t.true(AgentStub.create.called, 'create should be called on model')\n    t.true(AgentStub.update.calledWith(newAgent), 'create should be called with uuid args')\n\n    t.deepEqual(agent, newAgent, 'agent should be the same')\n})\n"]}