{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","config","logging","MetricStub","belongsTo","spy","AgentStub","sandbox","db","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb,C,CAA4B;AAC5B,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAIG,SAAS;AACVC,aAAS,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa,EAAE;AACfC,eAAWJ,MAAMK,GAAN,EADE,CACU;AADV,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,KAAK,IAAT;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AACxBF,cAAUP,MAAMO,OAAN,CAAcG,MAAd,EAAV,CADwB,CACS;AACjCJ,gBAAY;AACRK,iBAASJ,QAAQF,GAAR;AADD,KAAZ;AAGA,UAAMO,gBAAgBb,WAAW,KAAX,EAAiB;AACnC,0BAAmB,MAAMO,SADU;AAEnC,2BAAoB,MAAMH;AAFS,KAAjB,CAAtB;AAIAK,SAAK,MAAMI,cAAcX,MAAd,CAAX;AACH,CAVD;;AAYIJ,KAAKgB,SAAL,CAAe,MAAM;AACjBN,eAAWP,MAAMO,OAAN,CAAcO,OAAd,EAAX;AACH,CAFD;;AAIJjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AACfA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;AAGA;AACApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC,EADsB,CAC8C;AACpEL,MAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACH,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava') //libreria para pruebas unitarias\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nlet config = {\n   logging: function() {}\n}\n\nlet MetricStub = { //los stub simulan modelos, les pasan datos quemados para verificar que funcionan\n    belongsTo: sinon.spy() //sinon es una funcion que da diferentes datos como por ejemplo ver cuantas veces se requirio el metodo\n}\n\nlet AgentStub = null\nlet sandbox = null\nlet db = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create() //Cuando una funcion como agent es requerida muchas veces en varias partes del codigo los datos de cuantas veces se uso se acumulan y no funciona, se crea un sandbox para que esa estadistica se reinicie cada vez que se use\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    const setupDatabase = proxyquire('../',{\n        './models/agent' : () => AgentStub,\n        './models/metric' : () => MetricStub\n    })\n    db = await setupDatabase(config)\n})\n\n    test.afterEach(() => {\n        sandbox && sinon.sandbox.restore()\n    })\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n//El siguiente metodo es para hacer las pruebas de los stubs\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed') //estas propiedades o estos mensajes me los entrega Sinon.spy\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n})"]}