{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","sandbox","db","uuid","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava') //libreria para pruebas unitarias\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst agentFixtures = require('./fixtures/agent')//hace el llamado al datos falsos o quemados\n\nlet config = {\n   logging: function() {}\n}\n\nlet MetricStub = { //los stub simulan modelos, les pasan datos quemados para verificar que funcionan\n    belongsTo: sinon.spy() //sinon es una funcion que da diferentes datos como por ejemplo ver cuantas veces se requirio el metodo\n}\n\nlet id = 1\nlet single = Object.assign({}, agentFixtures.single) //clonamos el single para no estar probando solo con la instancia de fixtures, si no tener otra instancia por aparte \nlet AgentStub = null\nlet sandbox = null\nlet db = null\nlet uuid = 'yyy-yyy-yyy'\n\nlet uuidArgs = {\n    where: {\n        uuid\n    }\n}\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create() //Cuando una funcion como agent es requerida muchas veces en varias partes del codigo los datos de cuantas veces se uso se acumulan y no funciona, se crea un sandbox para que esa estadistica se reinicie cada vez que se use\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    //Model findOne Stub\n    AgentStub.findOne = sandbox.stub()\n    AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n    //Model findById Stub\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id))) //Con esta linea le doy ordenes a sinon de que es lo que ocupo que haga\n\n    const setupDatabase = proxyquire('../',{\n        './models/agent' : () => AgentStub,\n        './models/metric' : () => MetricStub\n    })\n    db = await setupDatabase(config)\n})\n\n    test.afterEach(() => {\n        sandbox && sandbox.restore()\n    })\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n//El siguiente metodo es para hacer las pruebas de los stubs\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed') //estas propiedades o estos mensajes me los entrega Sinon.spy\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')     \n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Agent#findById', async t =>{\n    let agent = await db.Agent.findById(id)\n\n    t.true(AgentStub.findById.called, 'findById should be called on model')\n    t.true(AgentStub.findById.calledOnce, 'findById should be called once')\n    t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\n\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - exist', async t => {\n    let agent = await db.Agent.createOrUpdate(single)\n\n    t.deepEqual(agent, single, 'agent should be the same')\n})"]}