{"version":3,"sources":["agent-tests.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","sandbox","db","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb,C,CAA4B;AAC5B,MAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB,C,CAAiD;;AAEjD,IAAII,SAAS;AACVC,aAAS,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa,EAAE;AACfC,eAAWL,MAAMM,GAAN,EADE,CACU;AADV,CAAjB;;AAIA,IAAIC,KAAK,CAAT;AACA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBT,cAAcO,MAAhC,CAAb,C,CAAqD;AACrD,IAAIG,YAAY,IAAhB;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,KAAK,IAAT;;AAGAhB,KAAKiB,UAAL,CAAgB,YAAY;AACxBF,cAAUZ,MAAMY,OAAN,CAAcG,MAAd,EAAV,CADwB,CACS;AACjCJ,gBAAY;AACRK,iBAASJ,QAAQN,GAAR;AADD,KAAZ;AAGA,UAAMW,gBAAgBlB,WAAW,KAAX,EAAiB;AACnC,0BAAmB,MAAMY,SADU;AAEnC,2BAAoB,MAAMP;AAFS,KAAjB,CAAtB;AAIAS,SAAK,MAAMI,cAAcf,MAAd,CAAX;AACH,CAVD;;AAYIL,KAAKqB,SAAL,CAAe,MAAM;AACjBN,eAAWA,QAAQO,OAAR,EAAX;AACH,CAFD;;AAIJtB,KAAK,OAAL,EAAcuB,KAAK;AAAA;;AACfA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;AAGA;AACAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC,EADsB,CAC8C;AACpEL,MAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,oCAAjD;AACAgB,MAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,mCAAnD;AACH,CALD;;AAOAd,MAAK0B,OAAO,gBAAP,EAAyB,MAAMH,CAAN,IAAU;AACpC,QAAIO,QAAQ,MAAMd,GAAGS,KAAH,CAASM,QAAT,CAAkBrB,EAAlB,CAAlB;;AAEAa,MAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc2B,QAAd,CAAuBrB,EAAvB,CAAnB,EAA+C,oBAA/C;AACH,CAJI,CAAL","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava') //libreria para pruebas unitarias\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nconst agentFixtures = require('./fixtures/agent')//hace el llamado al datos falsos o quemados\n\nlet config = {\n   logging: function() {}\n}\n\nlet MetricStub = { //los stub simulan modelos, les pasan datos quemados para verificar que funcionan\n    belongsTo: sinon.spy() //sinon es una funcion que da diferentes datos como por ejemplo ver cuantas veces se requirio el metodo\n}\n\nlet id = 1\nlet single = Object.assign({}, agentFixtures.single) //clonamos el single para no estar probando solo con la instancia de fixtures, si no tener otra instancia por aparte \nlet AgentStub = null\nlet sandbox = null\nlet db = null\n\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create() //Cuando una funcion como agent es requerida muchas veces en varias partes del codigo los datos de cuantas veces se uso se acumulan y no funciona, se crea un sandbox para que esa estadistica se reinicie cada vez que se use\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    const setupDatabase = proxyquire('../',{\n        './models/agent' : () => AgentStub,\n        './models/metric' : () => MetricStub\n    })\n    db = await setupDatabase(config)\n})\n\n    test.afterEach(() => {\n        sandbox && sandbox.restore()\n    })\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n//El siguiente metodo es para hacer las pruebas de los stubs\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed') //estas propiedades o estos mensajes me los entrega Sinon.spy\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')     \n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest,serial('Agent#findById', async t =>{\n    let agent = await db.Agent.findById(id)\n\n    t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})\n"]}