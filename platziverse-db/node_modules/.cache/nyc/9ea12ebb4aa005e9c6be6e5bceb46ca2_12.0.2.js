'use strict';var cov_27374rxtkw=function(){var path="/home/juanjo/MEGAsync/platziverse/platziverse-db/tests/agent-tests.js",hash="a65b69695da5d2d66ce61887247ee0e0a721edfe",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/juanjo/MEGAsync/platziverse/platziverse-db/tests/agent-tests.js",statementMap:{"0":{start:{line:3,column:30},end:{line:3,column:5630}},"1":{start:{line:4,column:27},end:{line:4,column:486}},"2":{start:{line:4,column:74},end:{line:4,column:93}},"3":{start:{line:4,column:96},end:{line:4,column:236}},"4":{start:{line:4,column:166},end:{line:4,column:219}},"5":{start:{line:4,column:220},end:{line:4,column:233}},"6":{start:{line:4,column:237},end:{line:4,column:454}},"7":{start:{line:4,column:328},end:{line:4,column:341}},"8":{start:{line:4,column:343},end:{line:4,column:362}},"9":{start:{line:4,column:363},end:{line:4,column:451}},"10":{start:{line:4,column:455},end:{line:4,column:482}},"11":{start:{line:6,column:13},end:{line:6,column:27}},"12":{start:{line:7,column:19},end:{line:7,column:40}},"13":{start:{line:8,column:14},end:{line:8,column:30}},"14":{start:{line:10,column:22},end:{line:10,column:49}},"15":{start:{line:12,column:13},end:{line:14,column:1}},"16":{start:{line:16,column:17},end:{line:18,column:1}},"17":{start:{line:20,column:9},end:{line:20,column:10}},"18":{start:{line:21,column:13},end:{line:21,column:52}},"19":{start:{line:22,column:16},end:{line:22,column:20}},"20":{start:{line:23,column:14},end:{line:23,column:18}},"21":{start:{line:24,column:9},end:{line:24,column:13}},"22":{start:{line:26,column:0},end:{line:40,column:3}},"23":{start:{line:27,column:4},end:{line:27,column:37}},"24":{start:{line:28,column:4},end:{line:32,column:6}},"25":{start:{line:32,column:6},end:{line:32,column:42}},"26":{start:{line:33,column:4},end:{line:33,column:85}},"27":{start:{line:35,column:26},end:{line:38,column:6}},"28":{start:{line:36,column:32},end:{line:36,column:41}},"29":{start:{line:37,column:33},end:{line:37,column:43}},"30":{start:{line:39,column:4},end:{line:39,column:37}},"31":{start:{line:42,column:0},end:{line:44,column:3}},"32":{start:{line:43,column:4},end:{line:43,column:33}},"33":{start:{line:46,column:0},end:{line:57,column:3}},"34":{start:{line:47,column:15},end:{line:47,column:41}},"35":{start:{line:49,column:4},end:{line:56,column:38}},"36":{start:{line:59,column:0},end:{line:97,column:3}},"37":{start:{line:60,column:16},end:{line:60,column:42}},"38":{start:{line:61,column:16},end:{line:61,column:42}},"39":{start:{line:62,column:16},end:{line:62,column:42}},"40":{start:{line:63,column:16},end:{line:63,column:42}},"41":{start:{line:65,column:4},end:{line:72,column:43}},"42":{start:{line:73,column:4},end:{line:80,column:46}},"43":{start:{line:81,column:4},end:{line:88,column:46}},"44":{start:{line:89,column:4},end:{line:96,column:45}},"45":{start:{line:99,column:0},end:{line:103,column:3}},"46":{start:{line:100,column:16},end:{line:100,column:43}},"47":{start:{line:102,column:4},end:{line:102,column:69}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:27},end:{line:4,column:28}},loc:{start:{line:4,column:39},end:{line:4,column:484}},line:4},"1":{name:"PowerAssertRecorder",decl:{start:{line:4,column:50},end:{line:4,column:69}},loc:{start:{line:4,column:72},end:{line:4,column:95}},line:4},"2":{name:"_capt",decl:{start:{line:4,column:143},end:{line:4,column:148}},loc:{start:{line:4,column:164},end:{line:4,column:235}},line:4},"3":{name:"_expr",decl:{start:{line:4,column:284},end:{line:4,column:289}},loc:{start:{line:4,column:305},end:{line:4,column:453}},line:4},"4":{name:"(anonymous_4)",decl:{start:{line:13,column:13},end:{line:13,column:14}},loc:{start:{line:13,column:25},end:{line:13,column:27}},line:13},"5":{name:"(anonymous_5)",decl:{start:{line:26,column:16},end:{line:26,column:17}},loc:{start:{line:26,column:28},end:{line:40,column:1}},line:26},"6":{name:"(anonymous_6)",decl:{start:{line:36,column:26},end:{line:36,column:27}},loc:{start:{line:36,column:32},end:{line:36,column:41}},line:36},"7":{name:"(anonymous_7)",decl:{start:{line:37,column:27},end:{line:37,column:28}},loc:{start:{line:37,column:33},end:{line:37,column:43}},line:37},"8":{name:"(anonymous_8)",decl:{start:{line:42,column:15},end:{line:42,column:16}},loc:{start:{line:42,column:21},end:{line:44,column:1}},line:42},"9":{name:"(anonymous_9)",decl:{start:{line:46,column:14},end:{line:46,column:15}},loc:{start:{line:46,column:19},end:{line:57,column:1}},line:46},"10":{name:"(anonymous_10)",decl:{start:{line:59,column:21},end:{line:59,column:22}},loc:{start:{line:59,column:26},end:{line:97,column:1}},line:59},"11":{name:"(anonymous_11)",decl:{start:{line:99,column:30},end:{line:99,column:31}},loc:{start:{line:99,column:41},end:{line:103,column:1}},line:99}},branchMap:{"0":{loc:{start:{line:43,column:4},end:{line:43,column:32}},type:"binary-expr",locations:[{start:{line:43,column:4},end:{line:43,column:11}},{start:{line:43,column:15},end:{line:43,column:32}}],line:43}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _powerAssertVisitorKeys=(cov_27374rxtkw.s[0]++,'{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}'),_powerAssertRecorder=(cov_27374rxtkw.s[1]++,function(){cov_27374rxtkw.f[0]++;function PowerAssertRecorder(){cov_27374rxtkw.f[1]++;cov_27374rxtkw.s[2]++;this.captured=[];}cov_27374rxtkw.s[3]++;PowerAssertRecorder.prototype._capt=function _capt(value,espath){cov_27374rxtkw.f[2]++;cov_27374rxtkw.s[4]++;this.captured.push({value:value,espath:espath});cov_27374rxtkw.s[5]++;return value;};cov_27374rxtkw.s[6]++;PowerAssertRecorder.prototype._expr=function _expr(value,source){cov_27374rxtkw.f[3]++;var capturedValues=(cov_27374rxtkw.s[7]++,this.captured);cov_27374rxtkw.s[8]++;this.captured=[];cov_27374rxtkw.s[9]++;return{powerAssertContext:{value:value,events:capturedValues},source:source};};cov_27374rxtkw.s[10]++;return PowerAssertRecorder;}());const test=(cov_27374rxtkw.s[11]++,require('ava'));//libreria para pruebas unitarias
const proxyquire=(cov_27374rxtkw.s[12]++,require('proxyquire'));const sinon=(cov_27374rxtkw.s[13]++,require('sinon'));const agentFixtures=(cov_27374rxtkw.s[14]++,require('./fixtures/agent'));//hace el llamado al datos falsos o quemados
let config=(cov_27374rxtkw.s[15]++,{logging:function(){cov_27374rxtkw.f[4]++;}});let MetricStub=(cov_27374rxtkw.s[16]++,{//los stub simulan modelos, les pasan datos quemados para verificar que funcionan
belongsTo:sinon.spy()//sinon es una funcion que da diferentes datos como por ejemplo ver cuantas veces se requirio el metodo
});let id=(cov_27374rxtkw.s[17]++,1);let single=(cov_27374rxtkw.s[18]++,Object.assign({},agentFixtures.single));//clonamos el single para no estar probando solo con la instancia de fixtures, si no tener otra instancia por aparte 
let AgentStub=(cov_27374rxtkw.s[19]++,null);let sandbox=(cov_27374rxtkw.s[20]++,null);let db=(cov_27374rxtkw.s[21]++,null);cov_27374rxtkw.s[22]++;test.beforeEach(async()=>{cov_27374rxtkw.f[5]++;cov_27374rxtkw.s[23]++;sandbox=sinon.sandbox.create();//Cuando una funcion como agent es requerida muchas veces en varias partes del codigo los datos de cuantas veces se uso se acumulan y no funciona, se crea un sandbox para que esa estadistica se reinicie cada vez que se use
cov_27374rxtkw.s[24]++;AgentStub={hasMany:sandbox.spy()//Model findById Stub
};cov_27374rxtkw.s[25]++;AgentStub.findById=sandbox.stub();cov_27374rxtkw.s[26]++;AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)));const setupDatabase=(cov_27374rxtkw.s[27]++,proxyquire('../',{'./models/agent':()=>{cov_27374rxtkw.f[6]++;cov_27374rxtkw.s[28]++;return AgentStub;},'./models/metric':()=>{cov_27374rxtkw.f[7]++;cov_27374rxtkw.s[29]++;return MetricStub;}}));cov_27374rxtkw.s[30]++;db=await setupDatabase(config);});cov_27374rxtkw.s[31]++;test.afterEach(()=>{cov_27374rxtkw.f[8]++;cov_27374rxtkw.s[32]++;(cov_27374rxtkw.b[0][0]++,sandbox)&&(cov_27374rxtkw.b[0][1]++,sandbox.restore());});cov_27374rxtkw.s[33]++;test('Agent',t=>{cov_27374rxtkw.f[9]++;var _rec=(cov_27374rxtkw.s[34]++,new _powerAssertRecorder());cov_27374rxtkw.s[35]++;t.truthy(_rec._expr(_rec._capt(_rec._capt(db,'arguments/0/object').Agent,'arguments/0'),{content:'t.truthy(db.Agent, \'Agent service should exist\')',filepath:'tests/agent-tests.js',line:46,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Agent","range":[12,17]},"computed":false,"range":[9,17]},{"type":"StringLiteral","value":"Agent service should exist","range":[19,47]}],"range":[0,48]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Agent","range":[12,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"Agent service should exist","range":[19,47]},{"type":{"label":")"},"range":[47,48]}]',visitorKeys:_powerAssertVisitorKeys}),'Agent service should exist');});//El siguiente metodo es para hacer las pruebas de los stubs
cov_27374rxtkw.s[36]++;test.serial('Setup',t=>{cov_27374rxtkw.f[10]++;var _rec2=(cov_27374rxtkw.s[37]++,new _powerAssertRecorder()),_rec3=(cov_27374rxtkw.s[38]++,new _powerAssertRecorder()),_rec4=(cov_27374rxtkw.s[39]++,new _powerAssertRecorder()),_rec5=(cov_27374rxtkw.s[40]++,new _powerAssertRecorder());cov_27374rxtkw.s[41]++;t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(AgentStub,'arguments/0/object/object').hasMany,'arguments/0/object').called,'arguments/0'),{content:'t.true(AgentStub.hasMany.called, \'AgentModel.hasMany was executed\')',filepath:'tests/agent-tests.js',line:50,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"AgentModel.hasMany was executed","range":[33,66]}],"range":[0,67]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"AgentModel.hasMany was executed","range":[33,66]},{"type":{"label":")"},"range":[66,67]}]',visitorKeys:_powerAssertVisitorKeys}),'AgentModel.hasMany was executed');//estas propiedades o estos mensajes me los entrega Sinon.spy
cov_27374rxtkw.s[42]++;t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(AgentStub,'arguments/0/callee/object/object').hasMany,'arguments/0/callee/object').calledWith(_rec3._capt(MetricStub,'arguments/0/arguments/0')),'arguments/0'),{content:'t.true(AgentStub.hasMany.calledWith(MetricStub), \'Argument should be the MetricModel\')',filepath:'tests/agent-tests.js',line:51,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"MetricStub","range":[36,46]}],"range":[7,47]},{"type":"StringLiteral","value":"Argument should be the MetricModel","range":[49,85]}],"range":[0,86]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"MetricStub","range":[36,46]},{"type":{"label":")"},"range":[46,47]},{"type":{"label":","},"range":[47,48]},{"type":{"label":"string"},"value":"Argument should be the MetricModel","range":[49,85]},{"type":{"label":")"},"range":[85,86]}]',visitorKeys:_powerAssertVisitorKeys}),'Argument should be the MetricModel');cov_27374rxtkw.s[43]++;t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub,'arguments/0/object/object').belongsTo,'arguments/0/object').called,'arguments/0'),{content:'t.true(MetricStub.belongsTo.called, \'MetricModel.belongsTo was executed\')',filepath:'tests/agent-tests.js',line:52,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"called","range":[28,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"MetricModel.belongsTo was executed","range":[36,72]}],"range":[0,73]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"called","range":[28,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"MetricModel.belongsTo was executed","range":[36,72]},{"type":{"label":")"},"range":[72,73]}]',visitorKeys:_powerAssertVisitorKeys}),'MetricModel.belongsTo was executed');cov_27374rxtkw.s[44]++;t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub,'arguments/0/callee/object/object').belongsTo,'arguments/0/callee/object').calledWith(_rec5._capt(AgentStub,'arguments/0/arguments/0')),'arguments/0'),{content:'t.true(MetricStub.belongsTo.calledWith(AgentStub), \'Argument should be the AgentModel\')',filepath:'tests/agent-tests.js',line:53,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"calledWith","range":[28,38]},"computed":false,"range":[7,38]},"arguments":[{"type":"Identifier","name":"AgentStub","range":[39,48]}],"range":[7,49]},{"type":"StringLiteral","value":"Argument should be the AgentModel","range":[51,86]}],"range":[0,87]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"calledWith","range":[28,38]},{"type":{"label":"("},"range":[38,39]},{"type":{"label":"name"},"value":"AgentStub","range":[39,48]},{"type":{"label":")"},"range":[48,49]},{"type":{"label":","},"range":[49,50]},{"type":{"label":"string"},"value":"Argument should be the AgentModel","range":[51,86]},{"type":{"label":")"},"range":[86,87]}]',visitorKeys:_powerAssertVisitorKeys}),'Argument should be the AgentModel');});cov_27374rxtkw.s[45]++;test.serial('Agent#findById',async t=>{cov_27374rxtkw.f[11]++;let agent=(cov_27374rxtkw.s[46]++,await db.Agent.findById(id));cov_27374rxtkw.s[47]++;t.deepEqual(agent,agentFixtures.byId(id),'should be the same');});//# sourceMappingURL=/home/juanjo/MEGAsync/platziverse/platziverse-db/node_modules/.cache/ava/199853f0a5025c40791a7f42ab397c8e.js.map